plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'

    id 'org.asciidoctor.convert' version '1.5.8'
}

group = 'com.ticket'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

asciidoctor {
    dependsOn test
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('testcontainersVersion', "1.14.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'commons-io:commons-io:2.6'
    //query문 처리할 때 내부 param 값 보여주는 라이브러리
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testCompile 'org.springframework.security:spring-security-test'
    testCompile "org.testcontainers:postgresql:1.15.0-rc2"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    testCompileOnly 'org.projectlombok:lombok:1.18.4'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.4'
    //ModelMapper
    compile 'org.modelmapper:modelmapper:2.3.3'
    //Spring AOP
    compile 'org.springframework.boot:spring-boot-starter-aop'
    //Guava
    implementation("com.google.guava:guava:29.0-jre")
    //RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    //jasypt
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"
    //postgreSQL
    implementation 'org.postgresql:postgresql'
    //querydsl
    compile("com.querydsl:querydsl-core") // querydsl
    compile("com.querydsl:querydsl-jpa") // querydsl
    annotationProcessor("com.querydsl:querydsl-apt:4.3.1:jpa") // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// RestDocs Build시 Copy되도록 Task 추가 ==
task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password")
}

build {
    dependsOn copyDocument
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

def generated = 'src/main/generated'
sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}